/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package tools.gui;

import game.Map.Tileset;
import java.awt.Color;
import java.awt.Graphics;
import java.awt.Point;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.awt.image.BufferedImage;
import java.io.IOException;
import java.util.List;
import javax.imageio.ImageIO;

/**
 *
 * @author BotNaEasyEnv
 */
public class TilesetPanel extends javax.swing.JPanel implements MouseListener{

    
    private BufferedImage image;
    private List<Tileset> tilesets;
    private Tileset currentTileset;
    private Point selected;
    /**
     * Creates new form TilesetPanel
     */
    public TilesetPanel() {
        initComponents();
        loadTilesets();
        drawCurrentImage();
        addListener();
    }
    
    private void loadTilesets(){
        try {
            tilesets = Tileset.loadAll(MapCreator.getDB());
            if(tilesets!=null&&tilesets.size()>0){
                currentTileset = tilesets.get(0);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
;    }
    
    private void addListener(){
        addMouseListener(this);
    }
    
    private void drawCurrentImage(){
        try {
            if(currentTileset!=null){
                image = ImageIO.read(TilesetPanel.class.getResourceAsStream(currentTileset.getResourcePath()));
                repaint();
            }
        } catch (IOException ex) {
            ex.printStackTrace();
        }
    }

    @Override
    protected void paintComponent(Graphics grphcs) {
        super.paintComponent(grphcs); 
        if(image!=null){
            grphcs.drawImage(image, 0,0, null);
            if(selected!=null){
                grphcs.setColor(Color.RED);
                int a = currentTileset.getSideSize();
                grphcs.drawRect(getProperX((int)selected.getX()), getProperY((int)selected.getY()), a, a);
                
            }
        } 
    }
    
    private int getProperX(int x){
        int r = currentTileset.getSideSize();
        int w = image.getWidth();
        return (((w/r)*x)/w)*r;
    }
    
    private int getProperY(int y){
        int r = currentTileset.getSideSize();
        int h = image.getHeight();
        return (((h/r)*y)/h)*r;
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.RAISED));
        setMinimumSize(new java.awt.Dimension(800, 1100));
        setPreferredSize(new java.awt.Dimension(800, 1100));
        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void mouseClicked(MouseEvent me) {
        selected = new Point(me.getX(), me.getY());
        repaint();
        //System.out.println("x: "+image.getWidth()+" y: "+image.getHeight());
    }

    @Override
    public void mousePressed(MouseEvent me) {
       
    }

    @Override
    public void mouseReleased(MouseEvent me) {
         
    }

    @Override
    public void mouseEntered(MouseEvent me) {
    }

    @Override
    public void mouseExited(MouseEvent me) {
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
